{"version":3,"sources":["config.js","Layout/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["base_url","key","NavBar","Fragment","className","href","src","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","App","props","mapGenereToName","id","state","genreList","filter","v","k","handleContainerOnBottom","filter_rating","filterMov","selected_genre","page","error","isLoaded","movieList","genreArr","clonemovieList","current_rate","handleChange","bind","handleClick","filterByRating","fetch","then","res","json","result","setState","genres","event","this","target","value","tmpArr","checked","removeAttribute","parentNode","style","textDecoration","console","log","includes","push","coma_str","toString","setAttribute","index","indexOf","splice","gen","url","results","length","vote_average","message","map","onClick","name","onChange","onBottom","poster_path","alt","original_title","genre_ids","val","arr","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.94311cbd.chunk.js","sourcesContent":["export const base_url = \"https://api.themoviedb.org/3/\";\nexport const key = \"f0218cb368232fc7b7ce7c10c724a25b\";\nexport const baseurl_image = \"https://image.tmdb.org/t/p/w342\";","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"/\">\n                            <img className=\"header-logo\" src=\"./logo.svg\" />\n                        </a>\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"/navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        \n                    </div>\n                </nav>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\nimport {base_url,key,baseurl_image} from './config'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BottomScrollListener from 'react-bottom-scroll-listener'\nimport Navbar from './Layout/NavBar'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      movieList: [],\n      genreList: [],\n      selected_genre: '',\n      genreArr: [],\n      page: 1,\n      clonemovieList: [],\n      filter_rating: false,\n      current_rate : ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.filterByRating = this.filterByRating.bind(this);\n  }\n\n\n  componentDidMount() {\n    let url = base_url+\"genre/movie/list?api_key=\"+key\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            genreList: result.genres\n          }, () => {\n\n          });\n\n          this.filterMov(this.state.selected_genre,1)\n        },\n\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  handleChange(event) {\n    this.setState({ selected_genre: event.target.value });\n    let target = event.target.value;\n    this.setState({\n      page: 1,\n      movieList: []\n    }, () => {\n      this.filterMov(target, 1);\n    })\n  }\n\n  handleClick(event) {\n    const target = event.target;\n    let tmpArr = [];\n    this.setState({current_rate:'',filter_rating:false,clonemovieList:[]})\n    if (target.checked) {\n      target.removeAttribute('checked');\n      target.parentNode.style.textDecoration = \"\";\n      console.log(\"check\", target.value)\n      if (!this.state.genreArr.includes(target.value)) {\n\n        tmpArr.push(target.value)\n        this.setState(\n          {\n            movieList: [],\n            genreArr: [...this.state.genreArr, ...tmpArr]\n          },\n          () => {\n            let coma_str = this.state.genreArr.toString();\n            this.setState({ selected_genre: coma_str });\n            this.filterMov(coma_str, 1)\n          }\n        );\n\n      }\n\n\n    } else {\n      target.setAttribute('checked', true);\n      target.parentNode.style.textDecoration = \"line-through\";\n      tmpArr = [...this.state.genreArr]; // make a separate copy of the array\n\n      var index = tmpArr.indexOf(event.target.value)\n      if (index !== -1) {\n        tmpArr.splice(index, 1);\n        let coma_str = tmpArr.toString();\n        this.setState(\n          {\n            selected_genre: coma_str,\n            movieList: [],\n            genreArr: tmpArr\n          },\n          () => {\n\n            this.filterMov(coma_str, 1)\n          });\n      }\n\n    }\n\n\n  }\n\n  mapGenereToName = (id) => {\n    return this.state.genreList.filter((v, k) => v.id === id);\n\n  }\n\n  filterMov(gen, page = 1) {\n    let url = base_url + \"discover/movie?api_key=\"+key+\"&sort_by=popularity.desc&with_genres=\" + gen + \"&page=\" + page;\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          this.setState({\n            isLoaded: true,\n            movieList: [...this.state.movieList, ...result.results],\n            page : this.state.page+1\n          }, () => {\n\n          });\n        },\n\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  handleContainerOnBottom = () => {\n    if (!this.state.filter_rating) {\n      this.filterMov(this.state.selected_genre, this.state.page)\n    }\n\n  }\n\n  filterByRating(event) {\n\n    if (event.target.value) {\n\n      let filter_rating = [];\n      \n      if(this.state.clonemovieList.length>0){\n        filter_rating = this.state.clonemovieList.filter((v, k) => v.vote_average > event.target.value);\n      }else{\n        filter_rating = this.state.movieList.filter((v, k) => v.vote_average > event.target.value);\n      }\n\n      this.setState({\n        filter_rating: true,\n        current_rate : event.target.value,\n        clonemovieList: this.state.movieList,\n        movieList: filter_rating\n      })\n\n    }\n    else {\n      this.setState({\n        current_rate : '',\n        filter_rating: false,\n        movieList: this.state.clonemovieList\n      }, () => {\n        this.setState({\n          clonemovieList : []\n        })\n      })\n    }\n\n\n  }\n\n  render() {\n    const { error, isLoaded, movieList, genreList, clonemovieList } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <main className=\"main-wrapper\" >\n          <Navbar />\n\n          <div className=\"container\">\n\n            <div className=\"row\">\n\n              <div className=\"col-lg-3\">\n                <h4 className=\"my-4\">Popularity</h4>\n                <div className=\"select-style\">\n                <select className=\"dropdown-list\"><option>Popularity</option></select>\n                </div>\n\n                <h4 className=\"my-4\">Generes Search</h4>\n                <div className=\"list-group\">\n\n                  <ul className=\"list-unstyled checkbox-list\">\n                    {\n                      genreList.map((v, k) => (\n                        <li key={k}>\n                          <input type=\"checkbox\" value={v.id} onClick={this.handleClick} />\n                          <label className=\"ml-2\"  value={v.id}>{v.name}</label>\n                        </li>\n                      ))\n                    }\n                  </ul>\n\n                </div>\n                <h4 className=\"my-4\">Rating</h4>\n                <div className=\"select-style\">\n                  <select  onChange={this.filterByRating} value={this.state.current_rate}>\n\n                    <option value=\"\">Any Rating</option>\n                    <option value=\"0\">0+ Star Rating</option>\n                    <option value=\"0.5\">0.5+ Star Rating</option>\n                    <option value=\"1\">1+ Star Rating</option>\n                    <option value=\"1.5\">1.5+ Star Rating</option>\n                    <option value=\"2\">2+ Star Rating</option>\n                    <option value=\"2.5\">2.5+ Star Rating</option>\n                    <option value=\"3\">3+ Star Rating</option>\n                    <option value=\"3.5\">3.5+ Star Rating</option>\n                    <option value=\"4\">4+ Star Rating</option>\n                    <option value=\"4.5\">4.5+ Star Rating</option>\n                    <option value=\"5\">5+ Star Rating</option>\n                    <option value=\"5.5\">4.5+ Star Rating</option>\n                    <option value=\"6\">6+ Star Rating</option>\n                    <option value=\"6.5\">6.5+ Star Rating</option>\n                    <option value=\"7\">7+ Star Rating</option>\n                    <option value=\"7.5\">7.5+ Star Rating</option>\n                    <option value=\"8\">8+ Star Rating</option>\n                    <option value=\"8.5\">8.5+ Star Rating</option>\n                    <option value=\"9\">9+ Star Rating</option>\n                    <option value=\"9.5\">9.5+ Star Rating</option>\n                    <option value=\"10\">10 Star Rating</option>\n\n                  </select>\n                </div>\n              </div>\n              <div className=\"col-lg-9 right-part\">\n                <div className=\"row my-3\">\n                  <BottomScrollListener onBottom={this.handleContainerOnBottom}>\n                    {movieList.map((v, k) => (\n                      <div key={k} className=\"col-md-3\">\n                        <div className=\"card\">\n                          <img className=\"card-img-top\" src={baseurl_image + v.poster_path} alt=\"Card cap\" />\n                          <div className=\"card-body pl-0 pr-0\">\n                            <h6 className=\"card-title\">{v.original_title} </h6>\n                            <strong>Rating : </strong> <span>{v.vote_average}</span><br></br>\n                            <strong>Generes List :</strong><br/>\n                            {\n                              \n                              v.genre_ids.map((id) => (\n                                this.mapGenereToName(id).map((val, index,arr) => (\n                                  <React.Fragment>\n                                    <span>{val.name}{','}</span>\n                                  </React.Fragment>\n\n                                ))\n                              ))\n\n                            }\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </BottomScrollListener>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}